name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.version-changed }}
      new-version: ${{ steps.check.outputs.new-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check if version changed
        id: check
        run: |
          # Get current version from manifest.json
          CURRENT_VERSION=$(python3 -c "
          import json
          with open('custom_components/samsung_jetbot/manifest.json', 'r') as f:
              data = json.load(f)
              print(data['version'])
          ")
          
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          
          echo "Current version: $CURRENT_VERSION"
          echo "Latest tag version: $LATEST_VERSION"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "new-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "version-changed=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version
          
      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Generate release notes
        run: |
          # Simple release notes generation
          NEW_VERSION="${{ needs.check-version.outputs.new-version }}"
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges)
          else
            COMMITS=$(git log --oneline --no-merges --max-count=10)
          fi
          
          # Create release notes
          echo "## What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          if [ -n "$COMMITS" ]; then
            echo "$COMMITS" | sed 's/^[a-f0-9]* /- /' >> RELEASE_NOTES.md
          else
            echo "- Initial release" >> RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...v${NEW_VERSION}" >> RELEASE_NOTES.md
          
          # Also update CHANGELOG.md for the repository
          echo "## [$NEW_VERSION] - $(date +%Y-%m-%d)" > temp_changelog.md
          echo "" >> temp_changelog.md
          
          if [ -n "$COMMITS" ]; then
            echo "### Changes" >> temp_changelog.md
            echo "$COMMITS" | sed 's/^[a-f0-9]* /- /' >> temp_changelog.md
          else
            echo "- Initial release" >> temp_changelog.md
          fi
          
          echo "" >> temp_changelog.md
          
          # Prepend to existing changelog or create new one
          if [ -f "CHANGELOG.md" ]; then
            cat CHANGELOG.md >> temp_changelog.md
          else
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          mv temp_changelog.md CHANGELOG.md
          
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          name: Release v${{ needs.check-version.outputs.new-version }}
          body_path: RELEASE_NOTES.md
          generate_release_notes: true
          files: |
            custom_components/samsung_jetbot/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-hacs:
    needs: [check-version, release]
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: HACS validation
        uses: hacs/action@main
        with:
          category: integration